;
;	File:		ClockPRAMPrimitives.a
;
;	Contains:	low-level routines for accessing the realtime clock and parameter RAM
;
;	Written by:	Steve Christensen 
;
;	Copyright:	© 1991-1993 by Apple Computer, Inc.  All rights reserved.
;
;   This file is used in these builds: ROM
;
;	Change History (most recent first):
;
;	  <SM14>	12/13/93	PN		Roll in KAOs and Horror changes to support Malcom and AJ
;									machines.
;	  <SM13>	 6/23/93	RC		Go back to the Ludwig roll-in since PDM reallly needs this code
;									from Cyclone - stay tuned for further fixes/changes from Kurt
;	  <SM12>	 6/21/93	kc		Roll out SM10 so that Quadras would wake up with the right time.
;	  <SM11>	 6/14/93	kc		Roll in Ludwig.
;	   <LW3>	 1/14/93	GS		(RBM)  Fix the occassional hang at boot.  When outputing from
;									the VIA to Cuda, the interrupt will occur prior to the rising
;									edge of CB1.  Delay long enough for the edge to occur before
;									acknowledging the shift register interrupt.
;	  <SM10>	 5/20/93	RM		EgretReadTime should not call _EgretDispatch. The lowmem global
;									'Time' is self correcting for Egret/Caboose/Cuda. The one second
;									interrupt handler for Egret / Caboose / Cuda maintains the
;									lowmem global 'Time' in a self correcting manner.  This routine
;									need only return the lowmem 'Time'.  A call to _EgretDispatch
;									will cause the AutoPoll timer within Egret / Caboose / Cuda to
;									reset, resulting in deferring ADB auto polling.  If an
;									application calls ReadTime in a tight loop, ADB polling could be
;									deferred indefinitely (making the mouse/keyboard appear to hang
;									or respond intermittently).  Since 'Time' is self correcting,
;									the routine just returns 'Time' as the result placed into
;									'GetParam'.
;	   <SM9>	12/11/92	fau		Backed out <SM8> cause it broke Cyclone.
;	   <SM8>	12/10/92	GS		This patch bypasses the physical read of Egret Chip when reading
;									the time. The time is automatically updated in the background,
;									therefore the low mem global always reflects the accurate time.
;									This patch pertains to all Egret Chip based firmware in
;									Egret8/9, Caboose, and Cuda.
;	   <SM7>	11/30/92	SWC		Rolled in the rest of the Horror changes, except for HcMac code.
;									Added the build conditionals back in.
;		<H6>	  9/3/92	SWC		Fixed a couple of bugs in the RTC-based routines (you mean no
;									one had any problems until now?). Thanks, Helder.
;	   <SM6>	10/21/92	fau		Cleaned up a MMCExists that was there from Pandora's timeframe:
;									comment P5.  Cuda works now, so we don't need to bypass stuff.
;	   <SM5>	 6/26/92	GS		(RBM)  Rewrite of 'CudaRdXByte' & 'CudaWrXByte' to avoid looking
;									for collisions. This is possible because a 'SyncAck' cycle
;									occurs immediately after 'InitVias' and disables all
;									asynchronous message sources within Cuda. These routines are
;									being used after the Cuda manager is installed which will cause
;									a loss of data from Cuda so I also made the routine dispatch to
;									a trap based function using the Cuda manager once the Cuda
;									manager is installed. This is not a particularly clean
;									implementation and needs to be looked at further!!!
;	   <SM4>	 5/28/92	kc		Add ClkNoMem.
;	   <SM3>	 5/25/92	RB		Removed a forCyclone conditional. This WAS the last one left. A
;									check for MMC is used instead to skip over RTCClkNoMem.
;	   <SM2>	 5/21/92	RB		Making changes for Cyclone. Original comments below: <P6>
;									2/10/92 GS Changed the PRAM IOPrimitives to use the full word of
;									a register to set up the address to R/W. <P5> 1/30/92 RMP
;									Temporarly disabled RTCClock read/write PRAM since Cuda isn't
;									working (I know it doesn't make sense but it's 2:13 in the
;									morning). <P4> 1/16/92 GS Updated the PRAMIO routine to use a
;									full word as the address to Read/Write <P4> 1/16/92 GS Update
;									VIA control bit var names. <P3> 1/16/92 GS Update to include the
;									new file CudaMgr Clock and PRAM routines. <P2> 01/14/92 jmp
;									(SWC,H5) Fixed PMgrWrXByte (registers were getting trashed).
;		 <1>	 5/17/92	kc		first checked in
;	   <SM0>	  5/2/92	kc		Roll in Horror. Comments follow:
;		<H5>	 1/13/92	SWC		Fixed PMgrWrXByte (registers were getting trashed).
;		<H4>	11/25/91	CCH		Used standardized equates for VIA pins.
;		<H3>	 11/7/91	SWC		Re-wrote the Egret code. It was working on an emulator but
;									stopped working when the Mac was running stand-alone. Converted
;									existing implementations to use a "standard" PramIO routine that
;									calls implementation specific read/write PRAM byte routines so
;									there's one less routine to write for new PRAM models that can
;									use it.
;		<H2>	 11/6/91	SWC		Re-wrote PMGRXPRamIO to fix problems too numerous to mention.
;		<H1>	10/15/91	SWC		Adding this file into the build.


			PRINT	OFF
			LOAD	'StandardEqu.d'
			INCLUDE	'HardwarePrivateEqu.a'
			INCLUDE	'UniversalEqu.a'
		IF hasPwrControls THEN
			INCLUDE	'PowerPrivEqu.a'
		ENDIF
		IF hasEgret THEN
			INCLUDE	'EgretEqu.a'
		ENDIF
			INCLUDE	'IOPrimitiveEqu.a'
			PRINT	ON
			PRINT	NOMDIR
			MACHINE	MC68020



ClockPRAMPrimitives	PROC	EXPORT

;————————————————————————————————————————————————————————————————————————————————————————
;
;	Clock/PRAM primitives vector table
;
;	Tables pointed to by the universal ProductInfo record (ClockPRAMPtr) for low-level
;	clock and PRAM routines dependent on the hardware.  There should be a table for each
;	supported ProductInfo.  Note that if a machine has a combination of the "standard"
;	PRAM and clock models, it should have a machine-specific table added below


			IMPORT	NWReadNVRAM_C, NWWriteNVRAM_C, NWReadTime_C, NWWriteTime_C

			EXPORT	NWClockPRAM
			DC.W	0								; flags
			DC.W	(NWTableEnd-NWClockPRAM)/4		; number of entries
NWClockPRAM
			DC.L	0								; not used
			DC.L	0								; not used
			DC.L	0								; not used
			DC.L	NWRdXByte-NWClockPRAM			; read PRAM byte (RAM-less)
			DC.L	NWWrXByte-NWClockPRAM			; write PRAM byte (RAM-less)
			DC.L	StandardXPramIO-NWClockPRAM		; read/write PRAM byte[s] (no traps)		<H3>
			DC.L	NWXParam-NWClockPRAM			; read/write PRAM byte[s] (trap-based)
			DC.L	NWReadTime-NWClockPRAM			; read the clock (uses RAM)
			DC.L	NWWriteTime-NWClockPRAM			; write to the clock (uses RAM)
			DC.L	NWReadNVRAM_C-NWClockPRAM		; direct path to C-based NVRAM access
			DC.L	NWWriteNVRAM_C-NWClockPRAM		; direct path to C-based NVRAM access
NWTableEnd



			WITH	EgretPB ; PMCommandRec


;________________________________________________________________________________________
;
; Routine:	StandardXPramIO
;
; Inputs:	A0	-	pointer to table of base addresses
;			A1	-	pointer to ProductInfo record for this machine
;			A3	-	pointer to PRAM I/O buffer
;			D1	-	flags indicating which external features are valid
;			D3	-	[r/w (bit 31)][number of PRAM bytes to read/write][starting PRAM address]
;
; Outputs:	none
;
; Trashes:	A0,A1,A2,A3,D0,D1,D2,D3
;
; Function:	Reads/writes byte[s] from paramter RAM before traps are set up.  This calls
;			the implementation-specific RdXByte and WrXByte routines to read or write
;			each PRAM byte.
;________________________________________________________________________________________

StandardXPramIO
			MOVEM.L	D7/A4-A6,-(SP)

			MOVEA.L	DecoderInfo.VIA1Addr(A0),A2	; get VIA 1's base address

			BCLR	#31,D3					; read or write?
			BEQ.S	@StartRead				; -> read

			BigBSR6	ClkWPOff,A5				; write-enable PRAM
			BRA.S	@StartWrite

@WriteLoop	
			MOVE	SR,-(SP)				; save the status register
			ORI		#$0700,SR				; and disable all interrupts
			BigBSR6	ClkWPOff,A5				; write-enable PRAM
			SWAP	D3						; get the PRAM address
			MOVE.W	D3,D1					; move entire address into D1
			MOVE.B	(A3)+,D2				;  and a data byte from the caller's buffer
			MOVE.L	A3,D7					; (save the buffer pointer)
			BigBSR6	WrXByte,A5				; write a byte to PRAM
			MOVEA.L	D7,A3					; (restore the buffer pointer)
			ADDQ.W	#1,D3					; next byte
			; Re-write-protect after each loop iteration: needed to flush some buffer?
			MOVEA.L	A1,A6					; point to this machine's product info
			ADDA.L	ProductInfo.ClockPRAMPtr(A6),A6	;  and get the address of its clock/PRAM table
			MOVE.L	4*cpWrProtOn(A6),D0		; get the offset to the write-protect routine
			BEQ.S	@ReprotectDone			; -> it's not supported for this implementation
			LEA		@ReprotectDone,A5		; (simulate a BSR5)
			ADDA.L	D0,A6					; calculate the routine's address
			JMP		(A6)					;  and call it to turn on PRAM write-protect
@ReprotectDone
			MOVE	(SP)+,SR				; restore the status register
@StartWrite	
			SWAP	D3						; get the count
			DBRA	D3,@WriteLoop			; -> keep looping until done
			bra.s	@Done					; we're done

@ReadLoop	SWAP	D3						; get the PRAM address
			MOVE.W	D3,D1					; move entire address into D1
			MOVE.L	A3,D7					; (save the buffer pointer)
			BigBSR6	RdXByte,A5				; read a byte from PRAM
			MOVEA.L	D7,A3					; (restore the buffer pointer)
			MOVE.B	D1,(A3)+				;  and save it in the caller's buffer
			ADDQ.W	#1,D3					; next byte
@StartRead	SWAP	D3						; get the count
			DBRA	D3,@ReadLoop			; -> keep looping until done

@Done		MOVEM.L	(SP)+,D7/A4-A6
			RTS


;________________________________________________________________________________________
;
; Routine:	NWXParam (old generic RTC code)
;
; Inputs:	A0	-	pointer to user's buffer
;			D0	-	[number of bytes to transfer][starting PRAM address]
;			D1	-	bit 12: 1=read, 0=write
;
; Outputs:	D0	-	result code
;
; Trashes:	A0,A1,A2,A3,D1,D2,D3
;
; Function:	reads/writes byte[s] from RTC-based paramter RAM
;________________________________________________________________________________________

NWXParam	MOVEA.L	A0,A3					; get the pointer to the caller's buffer
			MOVEA.L	UnivInfoPtr,A1			; point to the ProductInfo table						<H3>
			MOVEA.L	A1,A0					;  and to the decoder table								<H3>
			ADDA.L	ProductInfo.DecoderInfoPtr(A0),A0
			MOVE.L	D0,D3					; get the starting PRAM address and count
			BTST	#12,D1					; is it a read or write?
			BNE.S	@ItsRead
			BSET	#31,D3					; mark it as a write

@ItsRead	BSR.S	StandardXPramIO			; go transfer the PRAM bytes							<H3>

			MOVEQ	#0,D0					; always return "no error"
			RTS


;________________________________________________________________________________________
;
; Routine:	EgretWriteTime
;
; Inputs:	"Time" contains 32-bit quantity to write to clock
;
; Outputs:	D0	-	result code
;
; Trashes:	A0
;
; Function:	writes a new time value to the realtime clock
;________________________________________________________________________________________

EgretWriteTime
			CLR.L	-(SP)					;  pbCompletion = nil
			LEA		pbParam-pbCompletion(SP),SP
			MOVE.L	Time,(SP)				;  pbParam = current time

			MOVE.W	#(pseudopkt<<8)+\		;  pbCmdType = pseudo type
					+(WrTime<<0),-(SP)		;  pbCmd = write time
			MOVEA.L	SP,A0					; point to the parameter block
			_EgretDispatch					; call Egret to read the time
			LEA		EgretPBSize(SP),SP		; clean up the stack
			RTS


;______________________________________________________________________________________
;
; Routine:	ExpMgrXParam (new code, seems not to be used)
;
; Inputs:	A0	-	pointer to user's buffer
;			D0	-	[number of bytes to transfer][starting PRAM address]
;			D1	-	bit 12: 1=read, 0=write
;
; Outputs:	D0	-	result code
;
; Trashes:	A0,A1,A2,A3,D1,D2,D3
;
; Function:	reads/writes byte[s] from paramter RAM via the Expansion Manager
;______________________________________________________________________________________

			IMPORT	EXPANSIONBUSMGR_VEC0114, EXPANSIONBUSMGR_VEC0118

ExpMgrXParam
			MOVEM.L	D4-D7/A4,-(SP)
			MOVE.L	D0,D4
			ANDI.L	#$FFFF,D0
			MOVE.L	D0,-(SP)
			MOVE.L	D4,D0
			SWAP	D0
			ANDI.L	#$FFFF,D0
			MOVE.L	D0,-(SP)
			MOVE.L	A0,-(SP)

			BTST	#12,D1
			BNZ.S	@read
@write		JSR		EXPANSIONBUSMGR_VEC0118
			BRA.S	@endif
@read		JSR		EXPANSIONBUSMGR_VEC0114
@endif

			OPT		NONE
			ADDA.W	#12,SP
			OPT		ALL
			MOVEM.L	(SP)+,D4-D7/A4
			RTS


;______________________________________________________________________________________
;
; Routine:	NWRdXByte (glue for C code)
;
; Inputs:	D1	-	address of PRAM byte to read
;			A1	-	pointer to ProductInfo record for this machine
;			A2	-	VIA1 base address
;			A3	-	return address
;
; Outputs:	D1	-	byte read from PRAM
;			D0	-	???
;
; Function:	reads a byte from RTC partition of NewWorld NVRAM
;______________________________________________________________________________________

NWRdXByte
			MOVE.L	D0,-(SP)
			AND.L	#$FF,D1
			MOVE.L	D1,-(SP)
			BSR.L	NWReadNVRAM_C
			ADDQ.L	#4,SP
			MOVE.L	D0,D1
			MOVE.L	(SP)+,D0
			JMP		(A3)


;_____________________________________________________________________________________
;
; Routine:	NWWrXByte (glue for C code)
;
; Inputs:	D1	-	address of PRAM byte to write
;			D2	-	byte to write to PRAM
;			A1	-	pointer to ProductInfo record for this machine
;			A2	-	VIA1 base address
;			A3	-	return address
;
; Outputs:	D0	-	???
;
; Function:	writes a byte to the RTC partition of NewWorld NVRAM
;_____________________________________________________________________________________

NWWrXByte
			MOVE.L	D0,-(SP)		; argument: why D0?
			AND.L	#$FF,D2
			MOVE.L	D2,-(SP)		; argument: byte to write
			AND.L	#$FF,D1
			MOVE.L	D1,-(SP)		; argument: PRAM address
			BSR.L	NWWriteNVRAM_C
			ADDQ.L	#8,SP
			MOVE.L	(SP)+,D0		; return: again, why D0?
			JMP		(A3)


;______________________________________________________________________________________
;
; Routine:	NWReadTime (glue for C code)
;
; Inputs:	none
;
; Outputs:	"GetParam" contains the 32-bit time value read from the clock
;
; Function:	reads the time from the realtime clock via C code
;______________________________________________________________________________________

NWReadTime
			PEA		GetParam
			BSR.L	NWReadTime_C
			ADDQ.L	#4,SP
			RTS


;______________________________________________________________________________________
;
; Routine:	NWWriteTime (glue for C code)
;
; Inputs:	"Time" contains the 32-bit value to write to the clock
;
; Function:	writes a new time value to the realtime clock via C code
;______________________________________________________________________________________

NWWriteTime
			MOVE.L	Time,-(SP)
			BSR.L	NWWriteTime_C
			ADDQ.L	#4,SP
			RTS


;________________________________________________________________________________________
;
; Routine:	RdXByte (indirect via ProductInfo, cribbed from USTPram.a)
;
; Inputs:	A1	-	pointer to ProductInfo record for this machine
;			A2	-	VIA1 base address
;			A6	-	return address (BSR6)
;			D1	-	address of PRAM byte to read
;
; Outputs:	D1	-	byte read from PRAM
;
; Trashes:	A0,A3,A4,A5,A6,D0,D2
;
; Function:	reads a byte of extended PRAM at the specified address
;________________________________________________________________________________________

RdXByte		MOVEA.L	A1,A3					; point to this machine's product info					<H3>
			ADDA.L	ProductInfo.ClockPRAMPtr(A3),A3	;  and get the address of its clock/PRAM table	<H3>
			MOVE.L	4*cpRdXByte(A3),D0		; get the offset to the routine							<H3>
			BEQ.S	@NoEntry				; -> this function is not supported						<H3>
			ADDA.L	D0,A3					; calculate the routine's address						<H3>
			EXG		A6,A3					; save return address in A3, put routine's address in A6<H3>
@NoEntry	JMP		(A6)					;  and either call the routine or just return			<H3>


;________________________________________________________________________________________
;
; Routine:	WrXByte (indirect via ProductInfo, cribbed from USTPram.a)
;
; Inputs:	A1	-	pointer to ProductInfo record for this machine
;			A2	-	VIA1 base address
;			A6	-	caller's return address (BSR6)
;			D1	-	address of PRAM byte to read
;			D2	-	byte to write to PRAM
;
; Outputs:	none
;
; Trashes:	A0,A3,A4,A5,A6,D0,D1,D2
;
; Function:	writes a byte of extended PRAM at the specified address
;________________________________________________________________________________________

WrXByte		MOVEA.L	A1,A3					; point to this machine's product info					<H3>
			ADDA.L	ProductInfo.ClockPRAMPtr(A3),A3	;  and get the address of its clock/PRAM table	<H3>
			MOVE.L	4*cpWrXByte(A3),D0		; get the offset to the routine							<H3>
			BEQ.S	@NoEntry				; -> this function is not supported						<H3>
			ADDA.L	D0,A3					; calculate the routine's address						<H3>
			EXG		A6,A3					; save return address in A3, put routine's address in A6<H3>
@NoEntry	JMP		(A6)					;  and either call the routine or just return			<H3>


;________________________________________________________________________________________
;
; Routine:	ClkWPOff (indirect via ProductInfo, cribbed from USTPram.a)
;
; Inputs:	A1	-	pointer to ProductInfo record for this machine
;			A2	-	VIA1 base address
;			A6	-	return address (BSR6)
;
; Outputs:	none
;
; Trashes:	D0,D1,D2,A0,A5,A6
;
; Function:	write-enables the clock chip if supported by the clock implementation
;________________________________________________________________________________________

ClkWPOff	MOVEA.L	A1,A5					; point to this machine's product info					<H3>
			ADDA.L	ProductInfo.ClockPRAMPtr(A5),A5	;  and get the address of its clock/PRAM table	<H3>
			MOVE.L	4*cpWrProtOff(A5),D0	; get the offset to the routine							<H3>
			BEQ.S	@NoEntry				; -> this function is not supported						<H3>
			ADDA.L	D0,A5					; calculate the routine's address						<H3>
			EXG		A6,A5					; save return address in A5, put routine's address in A6<H3>
@NoEntry	JMP		(A6)					;  and either call the routine or just return			<H3>


			END
